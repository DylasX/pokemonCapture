import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import {
  Alert,
  Avatar,
  Button,
  CardActionArea,
  CardActions,
  Grid,
  Modal,
  Snackbar,
} from '@mui/material';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Typography from '@mui/material/Typography';
import { useEffect, useState } from 'react';
import { Box } from '@mui/system';

const baseUrlApi = process.env.BASE_URL || 'https://pokeapi.co/api/v2/';

interface PokemonInterface {
  name: string;
  id: number;
  height: number;
  sprites: Record<string, any>;
}

interface CapturePokemon {
  id: number;
}

const Home: NextPage = () => {
  const [pokemon, setPokemon] = useState<PokemonInterface>({
    name: '',
    id: 0,
    height: 0,
    sprites: {
      other: {
        front_default: {
          ['official-artwork']: '',
        },
      },
    },
  });
  const [generatePokemon, setNewPokemon] = useState<number>(
    Math.floor(Math.random() * 151) + 1
  );
  const [open, setOpen] = useState(false);
  const [openSnack, setOpenSnack] = useState(false);
  const [captured, setCaptured] = useState<any>({ id: 0 });
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const handleOpenSnack = () => setOpenSnack(true);
  const handleCloseSnack = () => setOpenSnack(false);

  const newPokemon = () => {
    setPokemon({
      name: '',
      id: 0,
      height: 0,
      sprites: {
        other: {
          front_default: {
            ['official-artwork']: '',
          },
        },
      },
    });
    setNewPokemon(Math.floor(Math.random() * 151) + 1);
  };

  const capturePokemon = (pokeballType: number) => {
    let pokeCaptureRatio = 0;
    let status = 150;
    // no hp factor used for now
    // let hpFactor = 100;
    // https://www.dragonflycave.com/mechanics/gen-i-capturing#algorithm
    switch (pokeballType) {
      case 1:
        pokeCaptureRatio = Math.floor(Math.random() * 255) + 1;
        break;
      case 2:
        pokeCaptureRatio = Math.floor(Math.random() * 200) + 1;
        break;
      case 3:
        pokeCaptureRatio = Math.floor(Math.random() * 150) + 1;
        break;
      default:
        pokeCaptureRatio = 0;
    }
    const pokeRatioStatus = pokeCaptureRatio - status;
    if (pokeRatioStatus < 0) {
      //captured return
      handleClose();
      handleOpenSnack();
      return setCaptured({ ...captured, [pokemon.id]: true });
    }
  };

  useEffect(() => {
    fetch(`${baseUrlApi}pokemon/${generatePokemon}`)
      .then((response) => response.json())
      .then((data) => setPokemon(data));
  }, [generatePokemon]);

  return (
    <div className={styles.mainDiv}>
      <Head>
        <title>Pokemon capture</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Grid container spacing={2}>
        <Grid item xs></Grid>
        <Grid item xs={8}>
          <Card
            sx={{ maxWidth: 400 }}
            className={styles.cardPokemon + ' ' + styles.doubleBorder}
          >
            <CardActionArea>
              {captured[pokemon.id] ? (
                <div className={styles.capturedPokemon}>
                  <Image
                    alt='Pokemon'
                    src={'/assets/images/pokeball.png'}
                    width={50}
                    height={50}
                  />
                </div>
              ) : (
                ''
              )}

              <Image
                alt='Pokemon'
                loading='lazy'
                src={
                  pokemon?.sprites?.other['official-artwork']?.front_default
                    ? pokemon.sprites.other['official-artwork'].front_default
                    : '/assets/images/pokeball.png'
                }
                width='50'
                height='50'
                layout='responsive'
              />
              <CardContent sx={{ marginTop: '50px', textAlign: 'center' }}>
                <Typography
                  gutterBottom
                  sx={{ fontFamily: 'OpenSans', textTransform: 'capitalize' }}
                  variant='h5'
                  component='div'
                >
                  {pokemon.name}
                </Typography>
                <Typography
                  variant='body2'
                  sx={{ fontFamily: 'OpenSans' }}
                  color='text.secondary'
                >
                  ID: {pokemon.id}
                </Typography>
              </CardContent>
            </CardActionArea>
            <CardActions className={styles.cardActions}>
              {captured[pokemon.id] ? (
                <Button
                  size='small'
                  sx={{ minWidth: '100px', fontFamily: 'OpenSans' }}
                  variant='outlined'
                  color='error'
                  onClick={newPokemon}
                >
                  New one
                </Button>
              ) : (
                <Button
                  size='small'
                  onClick={handleOpen}
                  sx={{ minWidth: '100px', fontFamily: 'OpenSans' }}
                  variant='outlined'
                  color='error'
                >
                  Capture
                </Button>
              )}

              <Button
                size='small'
                sx={{ minWidth: '100px', fontFamily: 'OpenSans' }}
                variant='outlined'
                color='error'
                onClick={newPokemon}
              >
                Run
              </Button>
            </CardActions>
          </Card>
        </Grid>
        <Grid item xs></Grid>
      </Grid>

      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby='modal-modal-title'
        aria-describedby='modal-modal-description'
      >
        <Box className={styles.modal}>
          <Typography
            id='modal-modal-title'
            sx={{
              fontFamily: 'OpenSans',
              textAlign: 'center',
            }}
            variant='h6'
            component='h2'
          >
            Choose your pokeball
          </Typography>
          <div className={styles.pokeballMenu}>
            <Image
              alt='Pokemon'
              src={'/assets/images/pokeball1.png'}
              width={50}
              height={50}
              onClick={() => {
                capturePokemon(1);
              }}
              className={styles.pokeball}
            />
            <Image
              alt='Pokemon'
              src={'/assets/images/greatball.png'}
              width={50}
              height={50}
              onClick={() => {
                capturePokemon(2);
              }}
              className={styles.pokeball}
            />
            <Image
              alt='Pokemon'
              src={'/assets/images/ultraball.png'}
              width={50}
              height={50}
              onClick={() => {
                capturePokemon(3);
              }}
              className={styles.pokeball}
            />
          </div>
        </Box>
      </Modal>
      <Snackbar
        open={openSnack}
        autoHideDuration={6000}
        onClose={handleCloseSnack}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'center',
        }}
        sx={{ bottom: '-15% !important' }}
      >
        <Alert
          onClose={handleCloseSnack}
          severity='success'
          sx={{ width: '100%', fontFamily: 'OpenSans' }}
        >
          Pokemon captured!
        </Alert>
      </Snackbar>
    </div>
  );
};

export default Home;
